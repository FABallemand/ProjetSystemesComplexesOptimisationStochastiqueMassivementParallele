/*______________________________________________________________

	find_perihelion_speed.ez // Speed of Earth at Perihelion
______________________________________________________________*/

\User declarations :
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>
#include <float.h>

// Output files
static FILE*trajectory_1 = fopen("trajectory_1.txt", "w");
static FILE*trajectory_2 = fopen("trajectory_2.txt", "w");
static FILE*trajectory_3 = fopen("trajectory_3.txt", "w");
static FILE*trajectory_4 = fopen("trajectory_4.txt", "w");

// Evolution parameters
static constexpr double proba_mut = 0.2; //< Probabilty of mutation
static constexpr double var_mut = 0.05;	 //< Mutation variation rate

// Constants
#define NB_SAMP 1024
#define DIM 2
#define R 0
#define THETA 1

static constexpr double a = 152.1E9;												 //< Aphelion distance
static constexpr double b = 147.1E9;												 //< Perihelion distance
static constexpr double p = M_PI * (3 * (a + b) - sqrt((3 * a + b) * (a + 3 * b)));	 //< Perimeter of the ellipse
static constexpr double perihelion_speed = (2 * M_PI * 30.2E3 * 24 * 3600) / p;		 //< Perihelion speed of Earth (rad/day)
static constexpr double sun_mass = 1.9884E30;										 //< Sun mass (kg)
static constexpr double g_const = 6.67408E-11 * ((24.0 * 3600.0) * (24.0 * 3600.0)); //< Gravitational constant
static constexpr double delta_t = 365.25 / NB_SAMP;									 //< Duration between two steps

// Variables
static double trajectory[NB_SAMP][DIM]; //< Earth trajectory around Sun (polar coord.)
static double prev_speed[DIM];			//< Speed at previous step (polar coord.)
static double curr_speed[DIM];			//< Speed at current step (polar coord.)
static int n = 0;						//< Current step

// Estimated variables
static double trajectory_estimated[NB_SAMP][DIM]; //< Earth trajectory around Sun (polar coord.)
static double prev_speed_estimated[DIM];		  //< Speed at previous step (polar coord.)
static double curr_speed_estimated[DIM];		  //< Speed at current step (polar coord.)
static int n_estimated = 0;						  //< Current step
\end

\User functions :
\end

\User CUDA :
\end

\Before everything else function :
srand(time(NULL)); // Initialise seed

// Initial conditions
trajectory[n][R] = 147.1E9;			  // Initial position (perihelion)
trajectory[n][THETA] = M_PI;		  // Initial position (perihelion)
curr_speed[R] = 0;					  // Initial speed (perihelion)
curr_speed[THETA] = perihelion_speed; // Initial speed (perihelion)
n++;								  // Next step

// Compute trajectory
for (; n < NB_SAMP; n++)
{
	prev_speed[R] = curr_speed[R];
	prev_speed[THETA] = curr_speed[THETA];

	curr_speed[R] = prev_speed[R] + (trajectory[n - 1][R] * prev_speed[THETA] * prev_speed[THETA] - ((g_const * sun_mass) / (trajectory[n - 1][R] * trajectory[n - 1][R]))) * delta_t;
	curr_speed[THETA] = prev_speed[THETA] + ((-2 * prev_speed[R] * prev_speed[THETA]) / trajectory[n - 1][R]) * delta_t;

	trajectory[n][R] = trajectory[n - 1][R] + curr_speed[R] * delta_t;
	trajectory[n][THETA] = trajectory[n - 1][THETA] + curr_speed[THETA] * delta_t;
}
\end

\After everything else function :
// Close output files
fclose(trajectory_1);
fclose(trajectory_2);
fclose(trajectory_3);
fclose(trajectory_4);
\end

\At the beginning of each generation function :
\end

\At each generation before reduce function :
\end

\At the end of each generation function :
const int gen_1 = 1;
const int gen_2 = 25;
const int gen_3 = 100;
const int gen_4 = 149;
if (currentGeneration == gen_1 || currentGeneration == gen_2 || currentGeneration == gen_3 || currentGeneration == gen_4)
{
	n_estimated = 0;

	// Initial conditions
	trajectory_estimated[n_estimated][R] = 147.1E9;				   // Initial position (perihelion)
	trajectory_estimated[n_estimated][THETA] = M_PI;			   // Initial position (perihelion)
	curr_speed_estimated[R] = 0;								   // Initial speed (perihelion)
	curr_speed_estimated[THETA] = bBest->perihelion_speed_to_find; // Initial speed (average)
	n_estimated++;												   // Next step

	// Compute trajectory
	for (; n_estimated < NB_SAMP; n_estimated++)
	{
		prev_speed_estimated[R] = curr_speed_estimated[R];
		prev_speed_estimated[THETA] = curr_speed_estimated[THETA];

		curr_speed_estimated[R] = prev_speed_estimated[R] + (trajectory_estimated[n_estimated - 1][R] * prev_speed_estimated[THETA] * prev_speed_estimated[THETA] - ((g_const * sun_mass) / (trajectory_estimated[n_estimated - 1][R] * trajectory_estimated[n_estimated - 1][R]))) * delta_t;
		curr_speed_estimated[THETA] = prev_speed_estimated[THETA] + ((-2 * prev_speed_estimated[R] * prev_speed_estimated[THETA]) / trajectory_estimated[n_estimated - 1][R]) * delta_t;

		trajectory_estimated[n_estimated][R] = trajectory_estimated[n_estimated - 1][R] + curr_speed_estimated[R] * delta_t;
		trajectory_estimated[n_estimated][THETA] = trajectory_estimated[n_estimated - 1][THETA] + curr_speed_estimated[THETA] * delta_t;
	}

	FILE *output_file = NULL;
	switch (currentGeneration)
	{
	case gen_1:
		output_file = trajectory_1;
		break;
	case gen_2:
		output_file = trajectory_2;
		break;
	case gen_3:
		output_file = trajectory_3;
		break;
	case gen_4:
		output_file = trajectory_4;
		break;
	default:
		printf("Error\n");
		exit(1);
	}
	for (int i = 0; i < NB_SAMP; i++)
	{
		fprintf(output_file, "%f,%f\n", trajectory_estimated[i][R], trajectory_estimated[i][THETA]);
	}
}
\end

\User classes : GenomeClass
{
  double perihelion_speed_to_find;
}
\end

\GenomeClass::display :
\end

\GenomeClass::initialiser :
Genome.perihelion_speed_to_find = random(1.0, (2 * M_PI) / 365.25);

printf("==== INITIALISER =================================================\n");
printf("PERIHELION SPEED: %f (init)\n", Genome.perihelion_speed_to_find);
printf("==================================================================\n");
\end

\GenomeClass::crossover : // by default when entering the function child is a clone of parent1
child.perihelion_speed_to_find = (child.perihelion_speed_to_find + parent2.perihelion_speed_to_find) / 2;
\end

\GenomeClass::mutator :
if (tossCoin(proba_mut))
{
  if (tossCoin(0.5))
  {
	  Genome.perihelion_speed_to_find += Genome.perihelion_speed_to_find * random(0.0, var_mut);
  }
  else
  {
	  Genome.perihelion_speed_to_find -= Genome.perihelion_speed_to_find * random(0.0, var_mut);
  }
}
\end

\GenomeClass::evaluator : // Lower is better
// Reset counter
n_estimated = 0;

// Initial conditions
trajectory_estimated[n_estimated][R] = 147.1E9;				   // Initial position (perihelion)
trajectory_estimated[n_estimated][THETA] = M_PI;			   // Initial position (perihelion)
curr_speed_estimated[R] = 0;								   // Initial speed (perihelion)
curr_speed_estimated[THETA] = Genome.perihelion_speed_to_find; // Initial speed (perihelion)
n_estimated++;												   // Next step

// Compute trajectory
for (; n_estimated < NB_SAMP; n_estimated++)
{
  prev_speed_estimated[R] = curr_speed_estimated[R];
  prev_speed_estimated[THETA] = curr_speed_estimated[THETA];

  curr_speed_estimated[R] = prev_speed_estimated[R] + (trajectory_estimated[n_estimated - 1][R] * prev_speed_estimated[THETA] * prev_speed_estimated[THETA] - ((g_const * sun_mass) / (trajectory_estimated[n_estimated - 1][R] * trajectory_estimated[n_estimated - 1][R]))) * delta_t;
  curr_speed_estimated[THETA] = prev_speed_estimated[THETA] + ((-2 * prev_speed_estimated[R] * prev_speed_estimated[THETA]) / trajectory_estimated[n_estimated - 1][R]) * delta_t;

  trajectory_estimated[n_estimated][R] = trajectory_estimated[n_estimated - 1][R] + curr_speed_estimated[R] * delta_t;
  trajectory_estimated[n_estimated][THETA] = trajectory_estimated[n_estimated - 1][THETA] + curr_speed_estimated[THETA] * delta_t;
}

// Compute score
double score = 0.0;
double x, y, x_estimated, y_estimated;
for (int i = 0; i < NB_SAMP; i++)
{
	x = trajectory[i][R] * cos(trajectory[i][THETA]);
	y = trajectory[i][R] * sin(trajectory[i][THETA]);
	x_estimated = trajectory_estimated[i][R] * cos(trajectory_estimated[i][THETA]);
	y_estimated = trajectory_estimated[i][R] * sin(trajectory_estimated[i][THETA]);
	score += sqrt((x - x_estimated)*(x - x_estimated) + (y - y_estimated)*(y - y_estimated));
}
if (score != score)
{
	score = DBL_MAX - 1;
}

printf("PERIHELION SPEED: %f (real), %f (estimated), [%f]\n", perihelion_speed, Genome.perihelion_speed_to_find, perihelion_speed / Genome.perihelion_speed_to_find);
printf("SCORE: %f\n", score);
printf("==================================================================\n");
return score;
\end

\User Makefile options :
\end

\Default run parameters :
	Number of generations : 100   			// NB_GEN
	Time limit : 0              			// In seconds, 0 to deactivate
	Population size : 150    	 			// POP_SIZE
	Offspring size : 100%        			// (percentage or absolute) 40% of the population size or 40
	Crossover probability : 1   			// XOVER_PROB (0.8 -> 20% of children are just clones of parent)
	Mutation probability : 1    			// MUT_PROB (???)
	Evaluator goal : minimise  	 			// Goal of the operation (maximise/minimise)
	Selection operator: Tournament 2		// (Tournament returns the best out of the [arg] individuals)
	Surviving parents : 100 % 		 		// Preselection of parents for the next generation (percentage or absolute)
	Surviving offspring : 100 %  	 		// Preselection of children for the next generation (percentage or absolute)
	Reduce parents operator: Tournament 2 	// How the preselection in done
	Reduce offspring operator: Tournament 2 // How the preselection in done
	Final reduce operator: Tournament 2 	// To determine who will be part of gen+1

	Elitism : Weak // Weak (keep the "elite" best PARENTS+CHILDREN into the next generation) or Strong (keep the "elite" best PARENTS)
	Elite : 1 
	Print stats : true // Sho evolution, Default: true
	Generate csv stats file : false
	Generate gnuplot script : false
	Generate R script : false
	Plot stats : true // Default: true

	Remote island model : false // Paralellism
	IP file : ip.txt 			// File containing all the remote island's IP
	Server port : 2929
	Migration probability : 0.3

	Save population : false
	Start from file : false
\end

/*
//======================//
// HOW TO RUN THIS FILE //
//======================//

1/ Go to https://easea.unistra.fr/index.php/Installing_EASEA and install easea

2/ Compile with easena: easena find_newton.ez

3/ Compile all C/C++/CUDA files: make

*/